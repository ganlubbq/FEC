reedsolomon - Reed-Solomon error correction
Written in 2017 by <Ahmet Inan> <xdsopl@gmail.com>
To the extent possible under law, the author(s) have dedicated all copyright and related and neighboring rights to this software to the public domain worldwide. This software is distributed without any warranty.
You should have received a copy of the CC0 Public Domain Dedication along with this software. If not, see <http://creativecommons.org/publicdomain/zero/1.0/>.

Read:
Tutorial on Reed-Solomon error correction coding
Geisel, William A. (NASA Lyndon B. Johnson Space Center, Houston, TX, United States)

Read:
A Simplified Procedure for Correcting Both Errors and Erasures of a Reed-Solomon Code Using the Euclidean Algorithm
T. K. Truong and I. S. Hsu (Communications Systems Research Section)
W. L. Eastman (Mitre Corporation)
I. S. Reed (University of Southern California)

Read:
Reed-Solomon error correction (White Paper WHP 031)
C.K.P. Clarke (BBC R&D)

Read:
Quadratic Equations in Finite Fields of Characteristic 2
Klaus Pommerening (Johannes Gutenberg-Universität Mainz)

Read:
Berlekamp–Massey algorithm
https://en.wikipedia.org/wiki/Berlekamp%E2%80%93Massey_algorithm

Read:
Chien search
https://en.wikipedia.org/wiki/Chien_search

Read:
Forney algorithm
https://en.wikipedia.org/wiki/Forney_algorithm

Read:
Synthetic division
https://en.wikipedia.org/wiki/Synthetic_division

Read:
Horner's method
https://en.wikipedia.org/wiki/Horner%27s_method

# make speed
clang++ -stdlib=libc++ -std=c++11 -W -Wall -O3 -march=native tablesgenerator.cc -o tablesgenerator
./tablesgenerator > galoisfieldtables.hh
clang++ -stdlib=libc++ -std=c++11 -W -Wall -O3 -march=native -DNDEBUG testbench.cc -o benchmark
uname -p | tee RESULTS
Intel(R) Core(TM) i5-6200U CPU @ 2.30GHz
./benchmark | tee -a RESULTS
testing: BBC WHP031 RS(15, 11) T=2
encoding of 1000000 random bytes into 1363642 codeword bytes (36% redundancy) in 181819 blocks took 25 milliseconds (40000KB/s).
decoding with 0 errors and 0 known erasures per block took 25 milliseconds (54546KB/s).
decoding with 1 errors and 0 known erasures per block took 42 milliseconds (32468KB/s).
decoding with 1 errors and 1 known erasures per block took 37 milliseconds (36855KB/s).
decoding with 2 errors and 0 known erasures per block took 62 milliseconds (21994KB/s).
decoding with 2 errors and 1 known erasures per block took 60 milliseconds (22727KB/s).
decoding with 2 errors and 2 known erasures per block took 50 milliseconds (27273KB/s).
decoding with 3 errors and 0 known erasures per block took 59 milliseconds (23113KB/s). expected 545457 corrected errors but got -15182 and 276517 wrong corrections.
decoding with 3 errors and 1 known erasures per block took 91 milliseconds (14985KB/s). expected 545457 corrected errors but got 75734 and 275110 wrong corrections.
decoding with 3 errors and 2 known erasures per block took 110 milliseconds (12397KB/s).
decoding with 3 errors and 3 known erasures per block took 99 milliseconds (13774KB/s).
decoding with 4 errors and 0 known erasures per block took 61 milliseconds (22355KB/s). expected 727276 corrected errors but got 41467 and 422550 wrong corrections.
decoding with 4 errors and 1 known erasures per block took 92 milliseconds (14822KB/s). expected 727276 corrected errors but got 97347 and 399453 wrong corrections.
decoding with 4 errors and 2 known erasures per block took 106 milliseconds (12865KB/s). expected 727276 corrected errors but got 366765 and 709753 wrong corrections.
decoding with 4 errors and 3 known erasures per block took 119 milliseconds (11459KB/s). expected 727276 corrected errors but got 519021 and 666865 wrong corrections.
decoding with 4 errors and 4 known erasures per block took 115 milliseconds (11858KB/s).
*snip*

